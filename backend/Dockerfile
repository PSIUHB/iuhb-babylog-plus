# Dockerfile
FROM node:22-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY backend/package*.json ./
COPY backend/tsconfig*.json ./

# Install all dependencies for building
RUN npm ci

# Copy source code
COPY backend/ .

# Build application
RUN npm run build

# Production stage
FROM node:22-alpine

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Copy package files
COPY backend/package*.json ./
COPY backend/tsconfig*.json ./

# Install only production dependencies
RUN npm ci --only=production && \
    npm install tsconfig-paths && \
    npm cache clean --force

# Copy built application from builder
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist

# Copy frontend dist files
COPY --chown=nodejs:nodejs frontend/dist ./frontend/dist

# Create necessary directories
RUN mkdir -p ./uploads ./logs && \
    chown -R nodejs:nodejs ./uploads ./logs ./frontend

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

# Start application
CMD ["node", "-r", "tsconfig-paths/register", "dist/main"]
